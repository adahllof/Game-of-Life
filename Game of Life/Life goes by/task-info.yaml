type: edu
custom_name: stage3
files:
- name: src/life/Main.java
  visible: true
  text: |
    package life;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/GameOfLifeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class GameOfLifeTest extends StageTest<String> {

        int[] sizes = {5, 6, 7, 8, 9, 10};

        @DynamicTest(data = "sizes")
        CheckResult test(int size) {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute(String.valueOf(size));

            if (output.isEmpty()) {
                return CheckResult.wrong("Looks like your output is empty!");
            }

            if (!output.toLowerCase().contains("generation")) {
                return CheckResult.wrong("Can't find 'Generation' word in the output!");
            }

            String[] generations = output.toLowerCase().split("generation");

            if (generations.length < 11) {
                return CheckResult.wrong("Your output should contain not less than 10 generations!");
            }

            List<Generation> generationsList = Generation.getGenerations(generations, size);

            Generation.isCorrectGenerationsList(generationsList);

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: test/common/CheckResultUtil.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.testcase.CheckResult

    operator fun CheckResult.component1(): Boolean = isCorrect
    operator fun CheckResult.component2(): String? = feedback

    fun fail(message: String) = CheckResult(false, message)  // TODO: add to repo
  learner_created: false
- name: test/common/ClueWithChecker.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase

    sealed class ClueWithChecker(val input: String) {
        fun toTestCase(): TestCase<ClueWithChecker> {
            return TestCase<ClueWithChecker>().setInput(input).setAttach(this)
        }
    }

    class ClueWithPredefinedFeedbackChecker(
            val predefinedFeedback: String,
            input: String,
            val checker: (String) -> Boolean
    ) : ClueWithChecker(input)

    class ClueWithDynamicFeedbackChecker(
            input: String,
            val checker: (String) -> CheckResult
    ) : ClueWithChecker(input)

    fun createDynamicFeedbackTest(input: String = "", checker: (String) -> CheckResult): TestCase<ClueWithChecker> {
        return ClueWithDynamicFeedbackChecker(
                input = input,
                checker = checker
        ).toTestCase()
    }

    fun checkClueWithCheckerTest(reply: String, clue: ClueWithChecker): CheckResult {
        return try {
            when (clue) {
                is ClueWithDynamicFeedbackChecker -> clue.checker(reply)
                is ClueWithPredefinedFeedbackChecker -> CheckResult(clue.checker(reply), clue.predefinedFeedback)
            }
        } catch (e: AssertionError) {
            if (clue is ClueWithPredefinedFeedbackChecker) {
                fail(clue.predefinedFeedback)
            } else {
                CheckResult.wrong("")
            }
        }
    }
  learner_created: false
- name: test/common/GameOfLifeStage3Test.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import life.Main

    abstract class GameOfLifeStage3Test : StageTest<ClueWithChecker>(Main::class.java) {

        override fun generate(): List<TestCase<ClueWithChecker>> {
            // two times:
            return (5..MAX_SIZE).flatMap(::stage3Tests) + (5..MAX_SIZE).flatMap(::stage3Tests)
        }

        override fun check(reply: String, clue: ClueWithChecker): CheckResult {
            return checkClueWithCheckerTest(reply = reply, clue = clue)
        }

        companion object {
            const val MAX_SIZE = 10
        }
    }

    fun stage3Tests(universeSize: Int): List<TestCase<ClueWithChecker>> {
        return listOf(
                createDynamicFeedbackTest("$universeSize\n") { reply ->
                    @Suppress("FoldInitializerAndIfToElvis")
                    val generations = reply
                            .toLowerCase()
                            .lines()
                            .filter { it.isNotEmpty() }
                            .joinToString("\n")
                            .split("generation".toRegex())
                            .drop(1)
                            .filter { it.lines().size > 1 }
                            .map {
                                val lines = it.lines()
                                val (idString, aliveString) = lines
                                val map = lines.drop(2)

                                if (!map.canBeMap(universeSize)) {
                                    return@createDynamicFeedbackTest fail("Can't read map in:\n$it\n")
                                }

                                val id = intRegex.find(idString)?.groupValues?.firstOrNull()?.toInt()
                                if (id == null) {
                                    return@createDynamicFeedbackTest fail("Can't find generation ID:\n$it\n")
                                }

                                val alive = intRegex.find(aliveString)?.groupValues?.firstOrNull()?.toInt()
                                if (alive == null) {
                                    return@createDynamicFeedbackTest fail("Can't find alive count:\n$it\n")
                                }

                                val generation = Generation(id, alive, map)
                                val aliveOnMap = generation.aliveOnMap(universeSize)

                                if (aliveOnMap != alive) {
                                    return@createDynamicFeedbackTest fail(
                                            "Alive count is wrong ($aliveOnMap expected, $alive got):\n$it\n"
                                    )
                                }

                                return@map generation
                            }

                    if (generations.isEmpty()) {
                        return@createDynamicFeedbackTest fail("Your program doesn't output generations for size $universeSize")
                    }

                    if (generations.first().id != 1) {
                        return@createDynamicFeedbackTest fail("First generation has number ${generations.first().id}")
                    }

                    val diffs = generations.windowed(2)

                    diffs.forEach { (prev, next) ->
                        if (prev.id + 1 != next.id) {
                            return@createDynamicFeedbackTest fail("ID of the generation #${prev.id + 1} is wrong (${next.id})")
                        }

                        if (!prev.evolvesTo(next, universeSize)) {
                            return@createDynamicFeedbackTest fail("Wrong evolution from #${prev.id} to #${prev.id + 1}")
                        }
                    }

                    return@createDynamicFeedbackTest CheckResult.correct()
                }
        )
    }

    val intRegex = """(\d)+""".toRegex()

    fun List<String>.canBeMap(universeSize: Int): Boolean {
        if (this.size < universeSize) {
            return false
        }

        return this.take(universeSize).all { it.length >= universeSize }
    }

    data class Generation(val id: Int, val alive: Int, val map: List<String>) {
        fun aliveOnMap(universeSize: Int): Int {
            return (0 until universeSize)
                    .flatMap { y -> (0 until universeSize).map { x -> x to y } }
                    .map { (x, y) -> map[x][y] }
                    .count { it.isAlive() }
        }

        fun evolvesTo(other: Generation, universeSize: Int): Boolean {
            return (0 until universeSize)
                    .flatMap { y -> (0 until universeSize).map { x -> x to y } }
                    .map { (x, y) ->
                        if (map[x][y].isAlive()) {
                            if (aliveNeighbours(x, y, universeSize) in setOf(2, 3)) {
                                other.map[x][y].isAlive()
                            } else {
                                !other.map[x][y].isAlive()
                            }
                        } else {
                            if (aliveNeighbours(x, y, universeSize) == 3) {
                                other.map[x][y].isAlive()
                            } else {
                                !other.map[x][y].isAlive()
                            }
                        }
                    }
                    .all { it }
        }

        fun aliveNeighbours(x: Int, y: Int, universeSize: Int): Int {
            var north = x - 1
            if (north < 0) north = universeSize - 1
            var south = x + 1
            if (south > universeSize - 1) south = 0
            var west = y - 1
            if (west < 0) west = universeSize - 1
            var east = y + 1
            if (east > universeSize - 1) east = 0

            var aliveNeighbours = 0
            if (map[north][west].isAlive()) ++aliveNeighbours
            if (map[north][y].isAlive()) ++aliveNeighbours
            if (map[north][east].isAlive()) ++aliveNeighbours
            if (map[x][west].isAlive()) ++aliveNeighbours
            if (map[x][east].isAlive()) ++aliveNeighbours
            if (map[south][west].isAlive()) ++aliveNeighbours
            if (map[south][y].isAlive()) ++aliveNeighbours
            if (map[south][east].isAlive()) ++aliveNeighbours

            return aliveNeighbours
        }

        fun Char.isAlive(): Boolean = this != ' '
    }
  learner_created: false
- name: test/Generation.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;
    import java.util.stream.Collectors;

    public class Generation {

        private static final Pattern pattern = Pattern.compile("alive:(\\s+)?(\\d+)", Pattern.MULTILINE);
        private final boolean[][] cells;
        private final int size;


        public Generation(List<String> lines) {

            size = lines.size();
            cells = new boolean[size][size];

            for (int i = 0; i < lines.size(); i++) {
                for (int j = 0; j < lines.size(); j++) {
                    cells[i][j] = lines.get(i).charAt(j) == 'o';
                }
            }
        }

        public static List<Generation> getGenerations(String[] generationsFromOutput, int correctSize) {

            List<Generation> generations = new ArrayList<>();

            for (int i = 1; i < generationsFromOutput.length; i++) {
                String generation = generationsFromOutput[i].toLowerCase();

                Matcher matcher = pattern.matcher(generation);

                if (!matcher.find()) {
                    throw new WrongAnswer("Can't find number of Alive cells in the generation with number "
                            + (i + 1) + ".\nYour output should contain 'Alive: DDD', where D is a digit!");
                }

                int aliveFromOutput = Integer.parseInt(matcher.group(2));

                List<String> lines = Arrays.stream(generation.split("\n"))
                        .filter(line -> !line.contains("alive") && !line.contains("#") && !line.isEmpty())
                        .collect(Collectors.toList());

                if (lines.size() != correctSize) {
                    throw new WrongAnswer("Generation #" + (i + 1) + " map size is wrong!\nYour size: " + lines.size() + "\n" +
                            "Expected size: " + correctSize);
                }

                int activeCellsInGeneration = (int) lines.stream().map(line -> line.split("")).flatMap(cells -> Arrays.stream(cells.clone())).filter(cell -> cell.equals("o")).count();

                if (activeCellsInGeneration != aliveFromOutput) {
                    throw new WrongAnswer("Active cells in the generation #" + (i + 1) + ": " + activeCellsInGeneration + "\n" +
                            "Your output: 'Alive: " + aliveFromOutput + "'");
                }

                for (String line : lines) {
                    if (line.length() != correctSize) {
                        throw new WrongAnswer("Generation map size is wrong!\nYour size: " + lines.size() + "\n" +
                                "Expected size: " + correctSize + "\nMake sure you don't print extra spaces at the end of the lines!");
                    }
                }

                generations.add(new Generation(lines));
            }

            return generations;
        }

        public boolean isCorrectNextGeneration(Generation generation) {

            if (generation.size != size) {
                return false;
            }

            for (int i = 0; i < size; i++) {
                for (int j = 0; j < size; j++) {

                    int numberOfNeighbours = 0;

                    int up = i - 1 < 0 ? size - 1 : i - 1;
                    int down = i + 1 == size ? 0 : i + 1;
                    int right = j + 1 == size ? 0 : j + 1;
                    int left = j - 1 < 0 ? size - 1 : j - 1;

                    if (cells[up][left]) numberOfNeighbours++;
                    if (cells[up][j]) numberOfNeighbours++;
                    if (cells[up][right]) numberOfNeighbours++;
                    if (cells[i][left]) numberOfNeighbours++;
                    if (cells[i][right]) numberOfNeighbours++;
                    if (cells[down][left]) numberOfNeighbours++;
                    if (cells[down][j]) numberOfNeighbours++;
                    if (cells[down][right]) numberOfNeighbours++;

                    if ((numberOfNeighbours < 2 || numberOfNeighbours > 3) && generation.cells[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }


        public static void isCorrectGenerationsList(List<Generation> generations) {

            if (generations.size() <= 1) {
                return;
            }

            for (int i = 1; i < generations.size(); i++) {
                if (!generations.get(i - 1).isCorrectNextGeneration(generations.get(i))) {
                    throw new WrongAnswer("Generation #" + (i + 1) + " is wrong!");
                }
            }
        }
    }
  learner_created: false
- name: src/life/Universe.java
  visible: true
  text: |
    package life;

    public class Universe {
        private int size;
        private boolean[][] map;

        public Universe(int size) {
            this.size = size;
            this.map = new boolean[size][size];
            for (int i = 0; i < size; i++) {
                for (int j = 0; j < size; j++) {
                    map[i][j] = false;
                }
            }
        }

        public int getSize() {
            return size;
        }

        public void setLife(int row, int col) {
            if (1 <= row && row <= size && 1 <= col && col <= size) {
                map[row - 1][col - 1] = true;
            } else {
                System.out.println("Index out of range! Row = " + row + " col =  " + col);
            }
        }

        public void kill(int row, int col) {
            if (1 <= row && row <= size && 1 <= col && col <= size) {
                map[row - 1][col - 1] = false;
            } else {
                System.out.println("Index out of range! Row = " + row + " col =  " + col);
            }
        }

        public void print() {
            for (int i = 0; i < size; i++) {
                for (int j = 0; j < size; j++) {
                    if (map[i][j]) {
                        System.out.print('O');
                    } else {
                        System.out.print(' ');
                    }
                }
                System.out.println();
            }
        }

        public boolean alive(int row, int col) {
            return map[row - 1][col - 1];
        }

        public int neighbours(int row, int col) {
            int count = 0;
            if (1 <= row && row <= size && 1 <= col && col <= size) {
               if (nw(row,col)) {
                   count++;
               }
                if (n(row,col)) {
                    count++;
                }
                if (ne(row,col)) {
                    count++;
                }
                if (w(row,col)) {
                    count++;
                }
                if (e(row,col)) {
                    count++;
                }
                if (sw(row,col)) {
                    count++;
                }
                if (s(row,col)) {
                    count++;
                }
                if (se(row,col)) {
                    count++;
                }
            } else {
                System.out.println("Index out of range! Row = " + row + " col =  " + col);
            }
            return count;
        }

        private boolean nw(int row, int col) {
            row--;
            col--;
            if (row < 1) {
                row = size;
            }
            if (col < 1) {
                col = size;
            }
            return map[row - 1][col - 1];
        }

        private boolean n(int row, int col) {
            row--;
            if (row < 1) {
                row = size;
            }
            return map[row - 1][col - 1];
        }

        private boolean ne(int row, int col) {
            row--;
            col++;
            if (row < 1) {
                row = size;
            }
            if (col > size) {
                col = 1;
            }
            return map[row - 1][col - 1];
        }

        private boolean w(int row, int col) {
            col--;
            if (col < 1) {
                col = size;
            }
            return map[row - 1][col - 1];
        }

        private boolean e(int row, int col) {
            col++;
            if (col > size) {
                col = 1;
            }
            return map[row - 1][col - 1];
        }

        private boolean sw(int row, int col) {
            row++;
            col--;
            if (row > size) {
                row = 1;
            }
            if (col < 1) {
                col = size;
            }
            return map[row - 1][col - 1];
        }

        private boolean s(int row, int col) {
            row++;
            if (row > size) {
                row = 1;
            }

            return map[row - 1][col - 1];
        }

        private boolean se(int row, int col) {
            row++;
            col++;
            if (row > size) {
                row = 1;
            }
            if (col > size) {
                col = 1;
            }
            return map[row - 1][col - 1];
        }
    }
  learner_created: true
- name: src/life/Generation.java
  visible: true
  text: |
    package life;

    public class Generation {
        private Universe nextGeneration;
        private int size;

        public Generation(int size) {
            this.size = size;
            this.nextGeneration = new Universe(size);
        }
        public void next(Universe initial) {
            //Compute next generation starting with supplied initial universe
            if (this.size == initial.getSize()) {
                //Compute next generation
                int countNeighbours;
                for (int row = 1; row <= size; row++) {
                    for (int col = 1; col <= size; col++) {
                        countNeighbours = initial.neighbours(row, col);
                        if (initial.alive(row, col) && 2 <= countNeighbours &&  countNeighbours <= 3) {
                            nextGeneration.setLife(row, col);
                        } else if (initial.alive(row, col)) {
                            nextGeneration.kill(row, col);
                        } else if (countNeighbours == 3) {
                            nextGeneration.setLife(row, col);
                        } else {
                            nextGeneration.kill(row, col);
                        }
                    }
                }
                updateUniverse(initial);
            } else {
                System.out.println("The initial world and the next generation must have the same size!");
            }
        }

        private void updateUniverse(Universe initial) {
            if (this.size == initial.getSize()) {
                for (int row = 1; row <= size; row++) {
                    for (int col = 1; col <= size; col++) {
                        if (nextGeneration.alive(row, col)) {
                            initial.setLife(row, col);
                        } else {
                            initial.kill(row, col);
                        }
                    }
                }
            } else {
                System.out.println("The initial world and the next generation must have the same size!");
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/54/stages/296/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 04 Feb 2021 10:41:59 UTC
record: 3
